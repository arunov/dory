%{

#include "Ast.h"
#include "ParserUtil.h"
#include "Error.h"

using namespace std;

extern int verbosity;
extern int yylex();
extern void yyerror(const char *s);
int offSet;
extern const OpNode::OpInfo opInfo[];

extern SymTabMgr stm;

/* Global variables for inherited attributes */
Type *var_type;
Type *fun_ret_type;
int unsigned_set;

int start_rule_scope = 0;
RuleBlockEntry* rbe = NULL;

%}

%union{
  unsigned int 		 uVal;
  double             dVal;
  char*              cVal;
  vector<string>*    strVector;
  Value*             valVal;

  ExprNode*          exprVal;
  vector<ExprNode*>* exprList;
  RefExprNode*       refexpVal;

  ClassEntry*        classEntry;
  Type*              typeVal;
  vector<Type*>*     typeList; 

  EventEntry*        eventEntry;                        
  VariableEntry*     variableEntry;
  FunctionEntry*     functionEntry;

  BasePatNode*       patVal;
  PrimitivePatNode*  primPatVal;
  StmtNode*          stmtVal;
  list<StmtNode*>*   stmtList;
  IfNode*            ifVal;
  CompoundStmtNode*  compoundStmtVal;
  RuleNode*          ruleNode;

  vector<RuleNode*>* transList;
  
  vector<Type*>*     formalTypeVal;
  const OpNode::OpInfo*    funIval;
};

/* Operators */

%token TOK_LEX_ERROR TOK_PAT_STAR TOK_PAT_OR TOK_PAT_NOT
%token TOK_PLUS TOK_MINUS TOK_UMINUS TOK_MULT TOK_DIV TOK_MOD 
%token TOK_BITAND TOK_BITOR TOK_BITNOT TOK_BITXOR TOK_SHL TOK_SHR 
%token TOK_GT TOK_LT TOK_GE TOK_LE TOK_EQ  TOK_NE TOK_AND TOK_OR TOK_NOT 
%token TOK_COMMA TOK_ASSIGN TOK_SEMICOLON TOK_COLON TOK_ARROW
%token TOK_LBRACE TOK_RBRACE TOK_LPAREN TOK_RPAREN

/* Key words */

%token TOK_IF TOK_ELSE TOK_CLASS TOK_RETURN TOK_EVENT TOK_ANY TOK_PRINT 
%token TOK_UINTNUM TOK_DOUBLENUM TOK_VOID TOK_STRING TOK_STRCONST 
%token TOK_INT TOK_UNSIGNED TOK_BOOL TOK_BYTE TOK_DOUBLE TOK_SHORT
%token TOK_TRUE TOK_FALSE TOK_IDENT

/******************************** Type Info ********************************/
/* Uncomment types below as you start adding rules.
   They are commented right now to prevent compile errors.

%type <funIval> ev_or_fun

*/

%type <refexpVal> ref_expr
%type <typeVal> baseType type formal_param_type 

%type <strVector> identifier_list identifier
%type <valVal> literal

%type <cVal> TOK_IDENT /* TOK_PRINT */
%type <uVal> TOK_UINTNUM 
%type <dVal> TOK_DOUBLENUM 
%type <cVal> TOK_STRCONST

%type <exprList> expr_list expr_plus
%type <exprVal> expr function_invocation asg_stmt opt_cond

%type <typeList> formal_param_list formal_param_plus 
%type <variableEntry> variable variable_decl formal_param /* variable_decl1 */

%type <classEntry> class_decl
%type <functionEntry> function_decl function_header
%type <eventEntry> event_decl event_decl_header event_header

%type <stmtList> statement_star
%type <stmtVal> statement /* simple_stmt */
%type <ifVal>  if_then_else_stmt 
%type <compoundStmtVal> compound_statement body body_star /* fun_rest */

%type <primPatVal> event primitive_pattern 
%type <patVal> event_pattern /* rule_body1 */

%type <ruleNode> rule_star

/*********************   Precedence and Associativity    ********************/

%nonassoc TOK_ASSIGN

%left  TOK_PAT_OR 
%left  TOK_COLON
%left  TOK_PAT_STAR
%right TOK_PAT_NOT

%left  TOK_OR
%left  TOK_AND
%right TOK_NOT

%nonassoc TOK_EQ TOK_NE TOK_GT TOK_LT TOK_GE TOK_LE

%left  TOK_BITOR TOK_BITXOR
%left  TOK_BITAND
%right TOK_BITNOT 
%left  TOK_SHL TOK_SHR

%right TOK_DOUBLE_COLON

%left  TOK_PLUS TOK_MINUS
%left  TOK_MULT TOK_DIV TOK_MOD
%right TOK_UMINUS 

%left  TOK_LBRACK
%left  TOK_DOT

/**************************************************************************/

%start specification
%%

specification: ifc_decl_star rule_star { }
;

ifc_decl_star: /* empty */ {
}
| ifc_decl_star ifc_decl { }
;

ifc_decl: TOK_SEMICOLON /* Fill in the other rules */ {  }
| class_decl {  }
| function_decl body_star { $1->body($2); stm.leaveScope(); stm.insert($1); }
| event_decl { stm.leaveScope(); stm.insert($1); }
| variable_decl { }
;

class_decl: TOK_CLASS TOK_IDENT {
	$$ = new ClassEntry($2);
	stm.insert($$);
}

function_header: type TOK_IDENT TOK_LPAREN {
	$$ = new FunctionEntry($2, nullptr);
	fun_ret_type = $1;
	stm.enterScope($$);
}

function_decl: function_header formal_param_list TOK_RPAREN {
	$1->type(new Type($2, fun_ret_type));
	$$ = $1;
}
;

formal_param: formal_param_type TOK_IDENT {
	VariableEntry::VarKind mk;
	SymTabEntry::Kind k = stm.currentScope()->kind();

	if (k == SymTabEntry::Kind::GLOBAL_KIND)
		mk = VariableEntry::VarKind::GLOBAL_VAR;
	else if (k == SymTabEntry::Kind::FUNCTION_KIND || k == SymTabEntry::Kind::EVENT_KIND)
		mk = VariableEntry::VarKind::PARAM_VAR;
	else
		mk = VariableEntry::VarKind::LOCAL_VAR;

	$$ = new VariableEntry($2, mk, $1);
	stm.insert($$);
	var_type = $1;
}
;

formal_param_plus: formal_param {
	$$ = new std::vector<Type*>();
	$$->push_back(var_type);
}
| formal_param_plus TOK_COMMA formal_param {
	if ($1)
		$1->push_back(var_type);
	else {
		$1 = new std::vector<Type*>();
		$1->push_back(var_type);
	}

	$$ = $1;
}
;

formal_param_list: /* empty */ { $$ = nullptr; }
| formal_param_plus { $$ = $1; }
;

formal_param_type: type_sign baseType { $$ = $2; unsigned_set = 0; }
| TOK_IDENT {
	SymTabEntry *lp = stm.lookUp($1);
	$$ = new Type(lp, Type::TypeTag::CLASS);
}
;

body_star: /* empty */ { $$ = nullptr;
}
| body { $$ = $1; }
;

body_header: TOK_LBRACE { }
;

body: body_header variable_decl_star statement TOK_RBRACE {
	std::list<StmtNode*>* s = new std::list<StmtNode*>();

	s->push_back($3);
	$$ = new CompoundStmtNode(s);
}
;

event_decl_header: TOK_EVENT TOK_IDENT TOK_LPAREN { $$ = new EventEntry($2); stm.enterScope($$); }
;

event_decl: event_decl_header formal_param_plus TOK_RPAREN { $$ = $1; }
| event_decl_header TOK_RPAREN { $$ = $1; }
| TOK_EVENT TOK_ANY {
	$$ = new EventEntry("any");
	stm.enterScope($$);
}
;

type_sign: /* empty */ {
}
| TOK_UNSIGNED { unsigned_set = 1; }
;

baseType: TOK_VOID { $$ = new Type(Type::voidType); }
| TOK_INT {
	if (unsigned_set)
		$$ = new Type(Type::uintType);
	else
		$$ = new Type(Type::intType);
}
| TOK_DOUBLE { $$ = new Type(Type::doubleType); }
| TOK_BOOL { $$ = new Type(Type::boolType); }
| TOK_STRING { $$ = new Type(Type::stringType); }
| TOK_BYTE { $$ = new Type(Type::byteType); }
| TOK_SHORT {
	if (unsigned_set)
		$$ = new Type(Type::uintType);
	else
		$$ = new Type(Type::intType);
}
;

type: type_sign baseType {
	$$ = var_type = $2;
	unsigned_set = 0;
}
| TOK_IDENT {
	SymTabEntry *lp = stm.lookUp($1);
        $$ = var_type = new Type(lp, Type::TypeTag::CLASS);
}
;

variable_decl_star: /* empty */ {
}
| variable_decl_star variable_decl { }
;

variable_decl: type variable TOK_SEMICOLON { $$ = $2; }
;

variable: TOK_IDENT {
	VariableEntry::VarKind mk;
	SymTabEntry::Kind k = stm.currentScope()->kind();

	if (k == SymTabEntry::Kind::GLOBAL_KIND)
		mk = VariableEntry::VarKind::GLOBAL_VAR;
	else if (k == SymTabEntry::Kind::FUNCTION_KIND || k == SymTabEntry::Kind::EVENT_KIND)
		mk = VariableEntry::VarKind::PARAM_VAR;
	else
		mk = VariableEntry::VarKind::LOCAL_VAR;

	$$ = new VariableEntry($1, mk, var_type);

	stm.insert($$);
}
| TOK_IDENT TOK_ASSIGN expr  {
	VariableEntry::VarKind mk;
	SymTabEntry::Kind k = stm.currentScope()->kind();

	if (k == SymTabEntry::Kind::GLOBAL_KIND)
		mk = VariableEntry::VarKind::GLOBAL_VAR;
	else if (k == SymTabEntry::Kind::FUNCTION_KIND || k == SymTabEntry::Kind::EVENT_KIND)
		mk = VariableEntry::VarKind::PARAM_VAR;
	else
		mk = VariableEntry::VarKind::LOCAL_VAR;

	$$ = new VariableEntry($1, mk, var_type, $3);

	stm.insert($$);
}
| variable TOK_COMMA TOK_IDENT {
	VariableEntry::VarKind mk;
	SymTabEntry::Kind k = stm.currentScope()->kind();

	if (k == SymTabEntry::Kind::GLOBAL_KIND)
		mk = VariableEntry::VarKind::GLOBAL_VAR;
	else if (k == SymTabEntry::Kind::FUNCTION_KIND || k == SymTabEntry::Kind::EVENT_KIND)
		mk = VariableEntry::VarKind::PARAM_VAR;
	else
		mk = VariableEntry::VarKind::LOCAL_VAR;

	$$ = new VariableEntry($3, mk, var_type);

	stm.insert($$);
}
| variable TOK_COMMA TOK_IDENT TOK_ASSIGN expr {
	VariableEntry::VarKind mk;
	SymTabEntry::Kind k = stm.currentScope()->kind();

	if (k == SymTabEntry::Kind::GLOBAL_KIND)
		mk = VariableEntry::VarKind::GLOBAL_VAR;
	else if (k == SymTabEntry::Kind::FUNCTION_KIND || k == SymTabEntry::Kind::EVENT_KIND)
		mk = VariableEntry::VarKind::PARAM_VAR;
	else
		mk = VariableEntry::VarKind::LOCAL_VAR;

	$$ = new VariableEntry($3, mk, var_type, $5);

	stm.insert($$);
}
;

rule_star: event_pattern TOK_ARROW statement TOK_SEMICOLON {
	$$ = new RuleNode(static_cast <BlockEntry*> (stm.currentScope()), $1, $3);
	stm.leaveScope();
	stm.insert(rbe);
	start_rule_scope = 0;
	static_cast <GlobalEntry*> (stm.currentScope())->addRule($$);
}
| rule_star event_pattern TOK_ARROW statement TOK_SEMICOLON {
	$$ = new RuleNode(static_cast <BlockEntry*> (stm.currentScope()), $2, $4);
	stm.leaveScope();
	stm.insert(rbe);
	start_rule_scope = 0;
	static_cast <GlobalEntry*> (stm.currentScope())->addRule($$);
}
| event_pattern TOK_ARROW statement {
	$$ = new RuleNode(static_cast <BlockEntry*> (stm.currentScope()), $1, $3);
	stm.leaveScope();
	stm.insert(rbe);
	start_rule_scope = 0;
	static_cast <GlobalEntry*> (stm.currentScope())->addRule($$);
}
| rule_star event_pattern TOK_ARROW statement {
	$$ = new RuleNode(static_cast <BlockEntry*> (stm.currentScope()), $2, $4);
	stm.leaveScope();
	stm.insert(rbe);
	start_rule_scope = 0;
	static_cast <GlobalEntry*> (stm.currentScope())->addRule($$);
}
;

event_header: TOK_IDENT TOK_LPAREN {
	EventEntry *epl = static_cast <EventEntry*> (stm.lookUp($1)); //TODO: lookUpScope() ?
	rbe = new RuleBlockEntry();

	if(!start_rule_scope) {
		stm.enterScope(rbe);
		start_rule_scope = 1;
	}

	$$ = epl;
}
;

event: event_header identifier_list TOK_RPAREN {
	std::vector<VariableEntry*>* vent = new std::vector<VariableEntry*>();
	std::vector<string>::iterator it;

	if ($1 && $1->symTab()) {
		SymTab::iterator it_sym = $1->symTab()->begin();

		for (it = $2->begin(), it_sym = $1->symTab()->begin(); it != $2->end(), it_sym != $1->symTab()->end(); ++it, ++it_sym) {
			vent->push_back(new VariableEntry(*it, VariableEntry::VarKind::PARAM_VAR, (*it_sym)->type()));
		}
	}

	$$ = new PrimitivePatNode($1, vent, nullptr);
}
| TOK_ANY {
	EventEntry *epl = static_cast <EventEntry*> (stm.lookUp("any")); //TODO: lookUpScope() ?
	rbe = new RuleBlockEntry();

	$$ = new PrimitivePatNode(epl, nullptr, nullptr);
	if(!start_rule_scope) {
		stm.enterScope(rbe);
		start_rule_scope = 1;
	}
}
;

event_pattern: primitive_pattern { $$ = $1; }
| TOK_LPAREN event_pattern TOK_RPAREN { $$ = $2; }
| event_pattern TOK_COLON event_pattern { $$ = new PatNode(BasePatNode::PatNodeKind::SEQ, $1, $3); }
| event_pattern TOK_PAT_STAR { $$ = new PatNode(BasePatNode::PatNodeKind::STAR, $1, nullptr); }
| event_pattern TOK_PAT_OR event_pattern { $$ = new PatNode(BasePatNode::PatNodeKind::OR, $1, $3); }
| TOK_NOT event_pattern { $$ = new PatNode(BasePatNode::PatNodeKind::NEG, $2, nullptr); }
;

identifier: TOK_IDENT { $$ = new std::vector<string>(); $$->push_back($1); }
| identifier TOK_COMMA TOK_IDENT { if ($1) { $1->push_back($3); $$ = $1; } else { $$ = new std::vector<string>(); $$->push_back($3);  } }
;

identifier_list: /* empty */ { $$ = nullptr;
}
| identifier { $$ = $1; }
;

opt_cond: /* empty */ { $$ = nullptr;
}
| TOK_BITOR expr { $$ = $2; }
;

primitive_pattern: event opt_cond { 
	$1->cond($2);
	$$ = $1;
}
;

compound_statement: TOK_LBRACE statement_star TOK_RBRACE { $$ = new CompoundStmtNode($2); }
;

if_then_else_stmt: TOK_IF expr statement { $$ = new IfNode($2, $3); }
| TOK_IF expr statement TOK_ELSE statement { $$ = new IfNode($2, $3, $5); }
;

statement_star: /* empty */ { $$ = nullptr;
}
| statement_star statement { if ($1) { $1->push_back($2); $$ = $1; } else { $$ = new std::list<StmtNode*>(); $$->push_back($2); } }
;

statement: TOK_SEMICOLON { $$ = nullptr; }
| TOK_RETURN expr TOK_SEMICOLON { $$ = new ReturnStmtNode($2, nullptr); }
| asg_stmt TOK_SEMICOLON { $$ = new ExprStmtNode($1); }
| function_invocation TOK_SEMICOLON { $$ = new ExprStmtNode($1); }
| compound_statement { $$ = $1; }
| if_then_else_stmt { $$ = $1; }
;

expr_plus: expr { $$ = new std::vector<ExprNode*>(); $$->push_back($1); }
| expr_plus TOK_COMMA expr { if($1) $1->push_back($3); $$ = $1; }
;

expr_list: /* empty */ { $$ = nullptr; }
| expr_plus { $$ = $1; }
;

literal: TOK_UINTNUM { $$ = new Value($1, Type::TypeTag::UINT); }
| TOK_DOUBLENUM { $$ = new Value($1); }
| TOK_STRCONST { $$ = new Value($1); }
| TOK_TRUE { $$ = new Value(true); }
| TOK_FALSE { $$ = new Value(false); }
;

ref_expr: TOK_IDENT { $$ = new RefExprNode($1, nullptr); }
;

asg_stmt: ref_expr TOK_ASSIGN expr { $$ = new OpNode(OpNode::OpCode::ASSIGN, $1, $3); }
;

function_invocation: TOK_IDENT TOK_LPAREN expr_list TOK_RPAREN {
	SymTabEntry *ste = stm.lookUp($1);
	$$ = new InvocationNode(ste, $3);
}
;

/* Expressions */
expr:   literal		{ $$ = new ValueNode($1); }
| expr TOK_PLUS expr	{ $$ = new OpNode(OpNode::OpCode::PLUS, $1, $3); }
| expr TOK_MINUS expr	{ $$ = new OpNode(OpNode::OpCode::MINUS, $1, $3); }
| expr TOK_MULT expr	{ $$ = new OpNode(OpNode::OpCode::MULT, $1, $3); }
| expr TOK_DIV expr	{ $$ = new OpNode(OpNode::OpCode::DIV, $1, $3); }
| expr TOK_MOD expr	{ $$ = new OpNode(OpNode::OpCode::MOD, $1, $3); }
| TOK_MINUS expr %prec TOK_UMINUS	{ $$ = new OpNode(OpNode::OpCode::UMINUS, $2); }
| expr TOK_BITXOR expr	{ $$ = new OpNode(OpNode::OpCode::BITXOR, $1, $3); }
| expr TOK_BITOR expr	{ $$ = new OpNode(OpNode::OpCode::BITOR, $1, $3); }
| expr TOK_BITAND expr	{ $$ = new OpNode(OpNode::OpCode::BITAND, $1, $3); }
| TOK_BITNOT expr	{ $$ = new OpNode(OpNode::OpCode::BITNOT, $2); }
| expr TOK_SHL expr	{ $$ = new OpNode(OpNode::OpCode::SHL, $1, $3); }
| expr TOK_SHR expr	{ $$ = new OpNode(OpNode::OpCode::SHR, $1, $3); }
| expr TOK_GT expr	{ $$ = new OpNode(OpNode::OpCode::GT, $1, $3); }
| expr TOK_LT expr	{ $$ = new OpNode(OpNode::OpCode::LT, $1, $3); }
| expr TOK_GE expr	{ $$ = new OpNode(OpNode::OpCode::GE, $1, $3); }
| expr TOK_LE expr	{ $$ = new OpNode(OpNode::OpCode::LE, $1, $3); }
| expr TOK_EQ expr	{ $$ = new OpNode(OpNode::OpCode::EQ, $1, $3); }
| expr TOK_NE expr	{ $$ = new OpNode(OpNode::OpCode::NE, $1, $3); }
| expr TOK_AND expr	{ $$ = new OpNode(OpNode::OpCode::AND, $1, $3); }
| expr TOK_OR expr	{ $$ = new OpNode(OpNode::OpCode::OR, $1, $3); }
| TOK_NOT expr		{ $$ = new OpNode(OpNode::OpCode::NOT, $2); }
| TOK_LPAREN expr TOK_RPAREN	{ $$ = $2; }
| ref_expr		{ $$ = $1; }
| asg_stmt		{ $$ = $1; }
| function_invocation	{ $$ = $1; }
| expr TOK_DOT expr	{          }
| TOK_LBRACK expr	{          }
;

%%
