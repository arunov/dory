Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_PRINT
   TOK_DOUBLE_COLON


State 12 conflicts: 1 shift/reduce
State 119 conflicts: 1 shift/reduce
State 191 conflicts: 1 shift/reduce


Grammar

    0 $accept: specification $end

    1 specification: ifc_decl_star rule_star

    2 ifc_decl_star: /* empty */
    3              | ifc_decl_star ifc_decl
    4              | ifc_decl_star error TOK_SEMICOLON

    5 ifc_decl: TOK_SEMICOLON
    6         | class_decl
    7         | function_decl body_star
    8         | event_decl
    9         | variable_decl

   10 class_decl: TOK_CLASS TOK_IDENT TOK_SEMICOLON
   11           | TOK_CLASS error TOK_SEMICOLON

   12 function_header: type TOK_IDENT TOK_LPAREN
   13                | type error TOK_LPAREN

   14 function_decl: function_header formal_param_list TOK_RPAREN

   15 formal_param: formal_param_type TOK_IDENT

   16 formal_param_plus: formal_param
   17                  | formal_param_plus TOK_COMMA formal_param

   18 formal_param_list: /* empty */
   19                  | formal_param_plus

   20 formal_param_type: type_sign baseType
   21                  | TOK_IDENT

   22 body_star: /* empty */
   23          | body

   24 body_header: TOK_LBRACE

   25 body: body_header variable_decl_star statement TOK_RBRACE

   26 event_decl_header: TOK_EVENT TOK_IDENT TOK_LPAREN

   27 event_decl: event_decl_header formal_param_plus TOK_RPAREN
   28           | event_decl_header TOK_RPAREN
   29           | TOK_EVENT TOK_ANY

   30 type_sign: /* empty */
   31          | TOK_UNSIGNED

   32 baseType: TOK_VOID
   33         | TOK_INT
   34         | TOK_DOUBLE
   35         | TOK_BOOL
   36         | TOK_STRING
   37         | TOK_BYTE
   38         | TOK_SHORT

   39 type: type_sign baseType
   40     | TOK_IDENT

   41 variable_decl_star: /* empty */
   42                   | variable_decl_star variable_decl

   43 variable_decl: type variable TOK_SEMICOLON
   44              | TOK_IDENT error TOK_SEMICOLON
   45              | type error TOK_SEMICOLON

   46 variable: TOK_IDENT
   47         | TOK_IDENT TOK_ASSIGN expr
   48         | variable TOK_COMMA TOK_IDENT
   49         | variable TOK_COMMA TOK_IDENT TOK_ASSIGN expr

   50 rule_star: event_pattern TOK_ARROW statement TOK_SEMICOLON
   51          | rule_star event_pattern TOK_ARROW statement TOK_SEMICOLON
   52          | event_pattern TOK_ARROW statement
   53          | rule_star event_pattern TOK_ARROW statement

   54 event_header: TOK_IDENT TOK_LPAREN

   55 event: event_header identifier_list TOK_RPAREN
   56      | TOK_ANY

   57 event_pattern: primitive_pattern
   58              | TOK_LPAREN event_pattern TOK_RPAREN
   59              | event_pattern TOK_COLON event_pattern
   60              | event_pattern TOK_PAT_STAR
   61              | event_pattern TOK_PAT_OR event_pattern
   62              | TOK_NOT event_pattern

   63 identifier: TOK_IDENT
   64           | identifier TOK_COMMA TOK_IDENT

   65 identifier_list: /* empty */
   66                | identifier

   67 opt_cond: /* empty */
   68         | TOK_BITOR expr

   69 primitive_pattern: event opt_cond

   70 compound_statement: TOK_LBRACE statement_star TOK_RBRACE

   71 if_then_else_stmt: TOK_IF expr statement
   72                  | TOK_IF expr statement TOK_ELSE statement

   73 statement_star: /* empty */
   74               | statement_star statement
   75               | statement_star error TOK_SEMICOLON

   76 statement: TOK_SEMICOLON
   77          | TOK_RETURN expr TOK_SEMICOLON
   78          | asg_stmt TOK_SEMICOLON
   79          | function_invocation TOK_SEMICOLON
   80          | compound_statement
   81          | if_then_else_stmt

   82 expr_plus: expr
   83          | expr_plus TOK_COMMA expr

   84 expr_list: /* empty */
   85          | expr_plus

   86 literal: TOK_UINTNUM
   87        | TOK_DOUBLENUM
   88        | TOK_STRCONST
   89        | TOK_TRUE
   90        | TOK_FALSE

   91 ref_expr: TOK_IDENT

   92 asg_stmt: ref_expr TOK_ASSIGN expr

   93 function_invocation: TOK_IDENT TOK_LPAREN expr_list TOK_RPAREN

   94 expr: literal
   95     | expr TOK_PLUS expr
   96     | expr TOK_MINUS expr
   97     | expr TOK_MULT expr
   98     | expr TOK_DIV expr
   99     | expr TOK_MOD expr
  100     | TOK_MINUS expr
  101     | expr TOK_BITXOR expr
  102     | expr TOK_BITOR expr
  103     | expr TOK_BITAND expr
  104     | TOK_BITNOT expr
  105     | expr TOK_SHL expr
  106     | expr TOK_SHR expr
  107     | expr TOK_GT expr
  108     | expr TOK_LT expr
  109     | expr TOK_GE expr
  110     | expr TOK_LE expr
  111     | expr TOK_EQ expr
  112     | expr TOK_NE expr
  113     | expr TOK_AND expr
  114     | expr TOK_OR expr
  115     | TOK_NOT expr
  116     | TOK_LPAREN expr TOK_RPAREN
  117     | ref_expr
  118     | asg_stmt
  119     | function_invocation
  120     | expr TOK_DOT expr
  121     | TOK_LBRACK expr


Terminals, with rules where they appear

$end (0) 0
error (256) 4 11 13 44 45 75
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 60
TOK_PAT_OR (260) 61
TOK_PAT_NOT (261)
TOK_PLUS (262) 95
TOK_MINUS (263) 96 100
TOK_UMINUS (264)
TOK_MULT (265) 97
TOK_DIV (266) 98
TOK_MOD (267) 99
TOK_BITAND (268) 103
TOK_BITOR (269) 68 102
TOK_BITNOT (270) 104
TOK_BITXOR (271) 101
TOK_SHL (272) 105
TOK_SHR (273) 106
TOK_GT (274) 107
TOK_LT (275) 108
TOK_GE (276) 109
TOK_LE (277) 110
TOK_EQ (278) 111
TOK_NE (279) 112
TOK_AND (280) 113
TOK_OR (281) 114
TOK_NOT (282) 62 115
TOK_COMMA (283) 17 48 49 64 83
TOK_ASSIGN (284) 47 49 92
TOK_SEMICOLON (285) 4 5 10 11 43 44 45 50 51 75 76 77 78 79
TOK_COLON (286) 59
TOK_ARROW (287) 50 51 52 53
TOK_LBRACE (288) 24 70
TOK_RBRACE (289) 25 70
TOK_LPAREN (290) 12 13 26 54 58 93 116
TOK_RPAREN (291) 14 27 28 55 58 93 116
TOK_IF (292) 71 72
TOK_ELSE (293) 72
TOK_CLASS (294) 10 11
TOK_RETURN (295) 77
TOK_EVENT (296) 26 29
TOK_ANY (297) 29 56
TOK_PRINT (298)
TOK_UINTNUM (299) 86
TOK_DOUBLENUM (300) 87
TOK_VOID (301) 32
TOK_STRING (302) 36
TOK_STRCONST (303) 88
TOK_INT (304) 33
TOK_UNSIGNED (305) 31
TOK_BOOL (306) 35
TOK_BYTE (307) 37
TOK_DOUBLE (308) 34
TOK_SHORT (309) 38
TOK_TRUE (310) 89
TOK_FALSE (311) 90
TOK_IDENT (312) 10 12 15 21 26 40 44 46 47 48 49 54 63 64 91 93
TOK_DOUBLE_COLON (313)
TOK_LBRACK (314) 121
TOK_DOT (315) 120


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
specification (62)
    on left: 1, on right: 0
ifc_decl_star (63)
    on left: 2 3 4, on right: 1 3 4
ifc_decl (64)
    on left: 5 6 7 8 9, on right: 3
class_decl (65)
    on left: 10 11, on right: 6
function_header (66)
    on left: 12 13, on right: 14
function_decl (67)
    on left: 14, on right: 7
formal_param (68)
    on left: 15, on right: 16 17
formal_param_plus (69)
    on left: 16 17, on right: 17 19 27
formal_param_list (70)
    on left: 18 19, on right: 14
formal_param_type (71)
    on left: 20 21, on right: 15
body_star (72)
    on left: 22 23, on right: 7
body_header (73)
    on left: 24, on right: 25
body (74)
    on left: 25, on right: 23
event_decl_header (75)
    on left: 26, on right: 27 28
event_decl (76)
    on left: 27 28 29, on right: 8
type_sign (77)
    on left: 30 31, on right: 20 39
baseType (78)
    on left: 32 33 34 35 36 37 38, on right: 20 39
type (79)
    on left: 39 40, on right: 12 13 43 45
variable_decl_star (80)
    on left: 41 42, on right: 25 42
variable_decl (81)
    on left: 43 44 45, on right: 9 42
variable (82)
    on left: 46 47 48 49, on right: 43 48 49
rule_star (83)
    on left: 50 51 52 53, on right: 1 51 53
event_header (84)
    on left: 54, on right: 55
event (85)
    on left: 55 56, on right: 69
event_pattern (86)
    on left: 57 58 59 60 61 62, on right: 50 51 52 53 58 59 60 61 62
identifier (87)
    on left: 63 64, on right: 64 66
identifier_list (88)
    on left: 65 66, on right: 55
opt_cond (89)
    on left: 67 68, on right: 69
primitive_pattern (90)
    on left: 69, on right: 57
compound_statement (91)
    on left: 70, on right: 80
if_then_else_stmt (92)
    on left: 71 72, on right: 81
statement_star (93)
    on left: 73 74 75, on right: 70 74 75
statement (94)
    on left: 76 77 78 79 80 81, on right: 25 50 51 52 53 71 72 74
expr_plus (95)
    on left: 82 83, on right: 83 85
expr_list (96)
    on left: 84 85, on right: 93
literal (97)
    on left: 86 87 88 89 90, on right: 94
ref_expr (98)
    on left: 91, on right: 92 117
asg_stmt (99)
    on left: 92, on right: 78 118
function_invocation (100)
    on left: 93, on right: 79 119
expr (101)
    on left: 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108
    109 110 111 112 113 114 115 116 117 118 119 120 121, on right:
    47 49 68 71 72 77 82 83 92 95 96 97 98 99 100 101 102 103 104 105
    106 107 108 109 110 111 112 113 114 115 116 120 121


state 0

    0 $accept: . specification $end

    $default  reduce using rule 2 (ifc_decl_star)

    specification  go to state 1
    ifc_decl_star  go to state 2


state 1

    0 $accept: specification . $end

    $end  shift, and go to state 3


state 2

    1 specification: ifc_decl_star . rule_star
    3 ifc_decl_star: ifc_decl_star . ifc_decl
    4              | ifc_decl_star . error TOK_SEMICOLON

    error          shift, and go to state 4
    TOK_NOT        shift, and go to state 5
    TOK_SEMICOLON  shift, and go to state 6
    TOK_LPAREN     shift, and go to state 7
    TOK_CLASS      shift, and go to state 8
    TOK_EVENT      shift, and go to state 9
    TOK_ANY        shift, and go to state 10
    TOK_UNSIGNED   shift, and go to state 11
    TOK_IDENT      shift, and go to state 12

    TOK_VOID    reduce using rule 30 (type_sign)
    TOK_STRING  reduce using rule 30 (type_sign)
    TOK_INT     reduce using rule 30 (type_sign)
    TOK_BOOL    reduce using rule 30 (type_sign)
    TOK_BYTE    reduce using rule 30 (type_sign)
    TOK_DOUBLE  reduce using rule 30 (type_sign)
    TOK_SHORT   reduce using rule 30 (type_sign)

    ifc_decl           go to state 13
    class_decl         go to state 14
    function_header    go to state 15
    function_decl      go to state 16
    event_decl_header  go to state 17
    event_decl         go to state 18
    type_sign          go to state 19
    type               go to state 20
    variable_decl      go to state 21
    rule_star          go to state 22
    event_header       go to state 23
    event              go to state 24
    event_pattern      go to state 25
    primitive_pattern  go to state 26


state 3

    0 $accept: specification $end .

    $default  accept


state 4

    4 ifc_decl_star: ifc_decl_star error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 27


state 5

   62 event_pattern: TOK_NOT . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 28

    event_header       go to state 23
    event              go to state 24
    event_pattern      go to state 29
    primitive_pattern  go to state 26


state 6

    5 ifc_decl: TOK_SEMICOLON .

    $default  reduce using rule 5 (ifc_decl)


state 7

   58 event_pattern: TOK_LPAREN . event_pattern TOK_RPAREN

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 28

    event_header       go to state 23
    event              go to state 24
    event_pattern      go to state 30
    primitive_pattern  go to state 26


state 8

   10 class_decl: TOK_CLASS . TOK_IDENT TOK_SEMICOLON
   11           | TOK_CLASS . error TOK_SEMICOLON

    error      shift, and go to state 31
    TOK_IDENT  shift, and go to state 32


state 9

   26 event_decl_header: TOK_EVENT . TOK_IDENT TOK_LPAREN
   29 event_decl: TOK_EVENT . TOK_ANY

    TOK_ANY    shift, and go to state 33
    TOK_IDENT  shift, and go to state 34


state 10

   56 event: TOK_ANY .

    $default  reduce using rule 56 (event)


state 11

   31 type_sign: TOK_UNSIGNED .

    $default  reduce using rule 31 (type_sign)


state 12

   40 type: TOK_IDENT .
   44 variable_decl: TOK_IDENT . error TOK_SEMICOLON
   54 event_header: TOK_IDENT . TOK_LPAREN

    error       shift, and go to state 35
    TOK_LPAREN  shift, and go to state 36

    error      [reduce using rule 40 (type)]
    TOK_IDENT  reduce using rule 40 (type)


state 13

    3 ifc_decl_star: ifc_decl_star ifc_decl .

    $default  reduce using rule 3 (ifc_decl_star)


state 14

    6 ifc_decl: class_decl .

    $default  reduce using rule 6 (ifc_decl)


state 15

   14 function_decl: function_header . formal_param_list TOK_RPAREN

    TOK_UNSIGNED  shift, and go to state 11
    TOK_IDENT     shift, and go to state 37

    TOK_RPAREN  reduce using rule 18 (formal_param_list)
    $default    reduce using rule 30 (type_sign)

    formal_param       go to state 38
    formal_param_plus  go to state 39
    formal_param_list  go to state 40
    formal_param_type  go to state 41
    type_sign          go to state 42


state 16

    7 ifc_decl: function_decl . body_star

    TOK_LBRACE  shift, and go to state 43

    $default  reduce using rule 22 (body_star)

    body_star    go to state 44
    body_header  go to state 45
    body         go to state 46


state 17

   27 event_decl: event_decl_header . formal_param_plus TOK_RPAREN
   28           | event_decl_header . TOK_RPAREN

    TOK_RPAREN    shift, and go to state 47
    TOK_UNSIGNED  shift, and go to state 11
    TOK_IDENT     shift, and go to state 37

    $default  reduce using rule 30 (type_sign)

    formal_param       go to state 38
    formal_param_plus  go to state 48
    formal_param_type  go to state 41
    type_sign          go to state 42


state 18

    8 ifc_decl: event_decl .

    $default  reduce using rule 8 (ifc_decl)


state 19

   39 type: type_sign . baseType

    TOK_VOID    shift, and go to state 49
    TOK_STRING  shift, and go to state 50
    TOK_INT     shift, and go to state 51
    TOK_BOOL    shift, and go to state 52
    TOK_BYTE    shift, and go to state 53
    TOK_DOUBLE  shift, and go to state 54
    TOK_SHORT   shift, and go to state 55

    baseType  go to state 56


state 20

   12 function_header: type . TOK_IDENT TOK_LPAREN
   13                | type . error TOK_LPAREN
   43 variable_decl: type . variable TOK_SEMICOLON
   45              | type . error TOK_SEMICOLON

    error      shift, and go to state 57
    TOK_IDENT  shift, and go to state 58

    variable  go to state 59


state 21

    9 ifc_decl: variable_decl .

    $default  reduce using rule 9 (ifc_decl)


state 22

    1 specification: ifc_decl_star rule_star .
   51 rule_star: rule_star . event_pattern TOK_ARROW statement TOK_SEMICOLON
   53          | rule_star . event_pattern TOK_ARROW statement

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 28

    $default  reduce using rule 1 (specification)

    event_header       go to state 23
    event              go to state 24
    event_pattern      go to state 60
    primitive_pattern  go to state 26


state 23

   55 event: event_header . identifier_list TOK_RPAREN

    TOK_IDENT  shift, and go to state 61

    $default  reduce using rule 65 (identifier_list)

    identifier       go to state 62
    identifier_list  go to state 63


state 24

   69 primitive_pattern: event . opt_cond

    TOK_BITOR  shift, and go to state 64

    $default  reduce using rule 67 (opt_cond)

    opt_cond  go to state 65


state 25

   50 rule_star: event_pattern . TOK_ARROW statement TOK_SEMICOLON
   52          | event_pattern . TOK_ARROW statement
   59 event_pattern: event_pattern . TOK_COLON event_pattern
   60              | event_pattern . TOK_PAT_STAR
   61              | event_pattern . TOK_PAT_OR event_pattern

    TOK_PAT_STAR  shift, and go to state 66
    TOK_PAT_OR    shift, and go to state 67
    TOK_COLON     shift, and go to state 68
    TOK_ARROW     shift, and go to state 69


state 26

   57 event_pattern: primitive_pattern .

    $default  reduce using rule 57 (event_pattern)


state 27

    4 ifc_decl_star: ifc_decl_star error TOK_SEMICOLON .

    $default  reduce using rule 4 (ifc_decl_star)


state 28

   54 event_header: TOK_IDENT . TOK_LPAREN

    TOK_LPAREN  shift, and go to state 36


state 29

   59 event_pattern: event_pattern . TOK_COLON event_pattern
   60              | event_pattern . TOK_PAT_STAR
   61              | event_pattern . TOK_PAT_OR event_pattern
   62              | TOK_NOT event_pattern .

    $default  reduce using rule 62 (event_pattern)


state 30

   58 event_pattern: TOK_LPAREN event_pattern . TOK_RPAREN
   59              | event_pattern . TOK_COLON event_pattern
   60              | event_pattern . TOK_PAT_STAR
   61              | event_pattern . TOK_PAT_OR event_pattern

    TOK_PAT_STAR  shift, and go to state 66
    TOK_PAT_OR    shift, and go to state 67
    TOK_COLON     shift, and go to state 68
    TOK_RPAREN    shift, and go to state 70


state 31

   11 class_decl: TOK_CLASS error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 71


state 32

   10 class_decl: TOK_CLASS TOK_IDENT . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 72


state 33

   29 event_decl: TOK_EVENT TOK_ANY .

    $default  reduce using rule 29 (event_decl)


state 34

   26 event_decl_header: TOK_EVENT TOK_IDENT . TOK_LPAREN

    TOK_LPAREN  shift, and go to state 73


state 35

   44 variable_decl: TOK_IDENT error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 74


state 36

   54 event_header: TOK_IDENT TOK_LPAREN .

    $default  reduce using rule 54 (event_header)


state 37

   21 formal_param_type: TOK_IDENT .

    $default  reduce using rule 21 (formal_param_type)


state 38

   16 formal_param_plus: formal_param .

    $default  reduce using rule 16 (formal_param_plus)


state 39

   17 formal_param_plus: formal_param_plus . TOK_COMMA formal_param
   19 formal_param_list: formal_param_plus .

    TOK_COMMA  shift, and go to state 75

    $default  reduce using rule 19 (formal_param_list)


state 40

   14 function_decl: function_header formal_param_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 76


state 41

   15 formal_param: formal_param_type . TOK_IDENT

    TOK_IDENT  shift, and go to state 77


state 42

   20 formal_param_type: type_sign . baseType

    TOK_VOID    shift, and go to state 49
    TOK_STRING  shift, and go to state 50
    TOK_INT     shift, and go to state 51
    TOK_BOOL    shift, and go to state 52
    TOK_BYTE    shift, and go to state 53
    TOK_DOUBLE  shift, and go to state 54
    TOK_SHORT   shift, and go to state 55

    baseType  go to state 78


state 43

   24 body_header: TOK_LBRACE .

    $default  reduce using rule 24 (body_header)


state 44

    7 ifc_decl: function_decl body_star .

    $default  reduce using rule 7 (ifc_decl)


state 45

   25 body: body_header . variable_decl_star statement TOK_RBRACE

    $default  reduce using rule 41 (variable_decl_star)

    variable_decl_star  go to state 79


state 46

   23 body_star: body .

    $default  reduce using rule 23 (body_star)


state 47

   28 event_decl: event_decl_header TOK_RPAREN .

    $default  reduce using rule 28 (event_decl)


state 48

   17 formal_param_plus: formal_param_plus . TOK_COMMA formal_param
   27 event_decl: event_decl_header formal_param_plus . TOK_RPAREN

    TOK_COMMA   shift, and go to state 75
    TOK_RPAREN  shift, and go to state 80


state 49

   32 baseType: TOK_VOID .

    $default  reduce using rule 32 (baseType)


state 50

   36 baseType: TOK_STRING .

    $default  reduce using rule 36 (baseType)


state 51

   33 baseType: TOK_INT .

    $default  reduce using rule 33 (baseType)


state 52

   35 baseType: TOK_BOOL .

    $default  reduce using rule 35 (baseType)


state 53

   37 baseType: TOK_BYTE .

    $default  reduce using rule 37 (baseType)


state 54

   34 baseType: TOK_DOUBLE .

    $default  reduce using rule 34 (baseType)


state 55

   38 baseType: TOK_SHORT .

    $default  reduce using rule 38 (baseType)


state 56

   39 type: type_sign baseType .

    $default  reduce using rule 39 (type)


state 57

   13 function_header: type error . TOK_LPAREN
   45 variable_decl: type error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 81
    TOK_LPAREN     shift, and go to state 82


state 58

   12 function_header: type TOK_IDENT . TOK_LPAREN
   46 variable: TOK_IDENT .
   47         | TOK_IDENT . TOK_ASSIGN expr

    TOK_ASSIGN  shift, and go to state 83
    TOK_LPAREN  shift, and go to state 84

    $default  reduce using rule 46 (variable)


state 59

   43 variable_decl: type variable . TOK_SEMICOLON
   48 variable: variable . TOK_COMMA TOK_IDENT
   49         | variable . TOK_COMMA TOK_IDENT TOK_ASSIGN expr

    TOK_COMMA      shift, and go to state 85
    TOK_SEMICOLON  shift, and go to state 86


state 60

   51 rule_star: rule_star event_pattern . TOK_ARROW statement TOK_SEMICOLON
   53          | rule_star event_pattern . TOK_ARROW statement
   59 event_pattern: event_pattern . TOK_COLON event_pattern
   60              | event_pattern . TOK_PAT_STAR
   61              | event_pattern . TOK_PAT_OR event_pattern

    TOK_PAT_STAR  shift, and go to state 66
    TOK_PAT_OR    shift, and go to state 67
    TOK_COLON     shift, and go to state 68
    TOK_ARROW     shift, and go to state 87


state 61

   63 identifier: TOK_IDENT .

    $default  reduce using rule 63 (identifier)


state 62

   64 identifier: identifier . TOK_COMMA TOK_IDENT
   66 identifier_list: identifier .

    TOK_COMMA  shift, and go to state 88

    $default  reduce using rule 66 (identifier_list)


state 63

   55 event: event_header identifier_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 89


state 64

   68 opt_cond: TOK_BITOR . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 105


state 65

   69 primitive_pattern: event opt_cond .

    $default  reduce using rule 69 (primitive_pattern)


state 66

   60 event_pattern: event_pattern TOK_PAT_STAR .

    $default  reduce using rule 60 (event_pattern)


state 67

   61 event_pattern: event_pattern TOK_PAT_OR . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 28

    event_header       go to state 23
    event              go to state 24
    event_pattern      go to state 106
    primitive_pattern  go to state 26


state 68

   59 event_pattern: event_pattern TOK_COLON . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 28

    event_header       go to state 23
    event              go to state 24
    event_pattern      go to state 107
    primitive_pattern  go to state 26


state 69

   50 rule_star: event_pattern TOK_ARROW . statement TOK_SEMICOLON
   52          | event_pattern TOK_ARROW . statement

    TOK_SEMICOLON  shift, and go to state 108
    TOK_LBRACE     shift, and go to state 109
    TOK_IF         shift, and go to state 110
    TOK_RETURN     shift, and go to state 111
    TOK_IDENT      shift, and go to state 99

    compound_statement   go to state 112
    if_then_else_stmt    go to state 113
    statement            go to state 114
    ref_expr             go to state 115
    asg_stmt             go to state 116
    function_invocation  go to state 117


state 70

   58 event_pattern: TOK_LPAREN event_pattern TOK_RPAREN .

    $default  reduce using rule 58 (event_pattern)


state 71

   11 class_decl: TOK_CLASS error TOK_SEMICOLON .

    $default  reduce using rule 11 (class_decl)


state 72

   10 class_decl: TOK_CLASS TOK_IDENT TOK_SEMICOLON .

    $default  reduce using rule 10 (class_decl)


state 73

   26 event_decl_header: TOK_EVENT TOK_IDENT TOK_LPAREN .

    $default  reduce using rule 26 (event_decl_header)


state 74

   44 variable_decl: TOK_IDENT error TOK_SEMICOLON .

    $default  reduce using rule 44 (variable_decl)


state 75

   17 formal_param_plus: formal_param_plus TOK_COMMA . formal_param

    TOK_UNSIGNED  shift, and go to state 11
    TOK_IDENT     shift, and go to state 37

    $default  reduce using rule 30 (type_sign)

    formal_param       go to state 118
    formal_param_type  go to state 41
    type_sign          go to state 42


state 76

   14 function_decl: function_header formal_param_list TOK_RPAREN .

    $default  reduce using rule 14 (function_decl)


state 77

   15 formal_param: formal_param_type TOK_IDENT .

    $default  reduce using rule 15 (formal_param)


state 78

   20 formal_param_type: type_sign baseType .

    $default  reduce using rule 20 (formal_param_type)


state 79

   25 body: body_header variable_decl_star . statement TOK_RBRACE
   42 variable_decl_star: variable_decl_star . variable_decl

    TOK_SEMICOLON  shift, and go to state 108
    TOK_LBRACE     shift, and go to state 109
    TOK_IF         shift, and go to state 110
    TOK_RETURN     shift, and go to state 111
    TOK_UNSIGNED   shift, and go to state 11
    TOK_IDENT      shift, and go to state 119

    $default  reduce using rule 30 (type_sign)

    type_sign            go to state 19
    type                 go to state 120
    variable_decl        go to state 121
    compound_statement   go to state 112
    if_then_else_stmt    go to state 113
    statement            go to state 122
    ref_expr             go to state 115
    asg_stmt             go to state 116
    function_invocation  go to state 117


state 80

   27 event_decl: event_decl_header formal_param_plus TOK_RPAREN .

    $default  reduce using rule 27 (event_decl)


state 81

   45 variable_decl: type error TOK_SEMICOLON .

    $default  reduce using rule 45 (variable_decl)


state 82

   13 function_header: type error TOK_LPAREN .

    $default  reduce using rule 13 (function_header)


state 83

   47 variable: TOK_IDENT TOK_ASSIGN . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 123


state 84

   12 function_header: type TOK_IDENT TOK_LPAREN .

    $default  reduce using rule 12 (function_header)


state 85

   48 variable: variable TOK_COMMA . TOK_IDENT
   49         | variable TOK_COMMA . TOK_IDENT TOK_ASSIGN expr

    TOK_IDENT  shift, and go to state 124


state 86

   43 variable_decl: type variable TOK_SEMICOLON .

    $default  reduce using rule 43 (variable_decl)


state 87

   51 rule_star: rule_star event_pattern TOK_ARROW . statement TOK_SEMICOLON
   53          | rule_star event_pattern TOK_ARROW . statement

    TOK_SEMICOLON  shift, and go to state 108
    TOK_LBRACE     shift, and go to state 109
    TOK_IF         shift, and go to state 110
    TOK_RETURN     shift, and go to state 111
    TOK_IDENT      shift, and go to state 99

    compound_statement   go to state 112
    if_then_else_stmt    go to state 113
    statement            go to state 125
    ref_expr             go to state 115
    asg_stmt             go to state 116
    function_invocation  go to state 117


state 88

   64 identifier: identifier TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 126


state 89

   55 event: event_header identifier_list TOK_RPAREN .

    $default  reduce using rule 55 (event)


state 90

  100 expr: TOK_MINUS . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 127


state 91

  104 expr: TOK_BITNOT . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 128


state 92

  115 expr: TOK_NOT . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 129


state 93

  116 expr: TOK_LPAREN . expr TOK_RPAREN

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 130


state 94

   86 literal: TOK_UINTNUM .

    $default  reduce using rule 86 (literal)


state 95

   87 literal: TOK_DOUBLENUM .

    $default  reduce using rule 87 (literal)


state 96

   88 literal: TOK_STRCONST .

    $default  reduce using rule 88 (literal)


state 97

   89 literal: TOK_TRUE .

    $default  reduce using rule 89 (literal)


state 98

   90 literal: TOK_FALSE .

    $default  reduce using rule 90 (literal)


state 99

   91 ref_expr: TOK_IDENT .
   93 function_invocation: TOK_IDENT . TOK_LPAREN expr_list TOK_RPAREN

    TOK_LPAREN  shift, and go to state 131

    $default  reduce using rule 91 (ref_expr)


state 100

  121 expr: TOK_LBRACK . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 132


state 101

   94 expr: literal .

    $default  reduce using rule 94 (expr)


state 102

   92 asg_stmt: ref_expr . TOK_ASSIGN expr
  117 expr: ref_expr .

    TOK_ASSIGN  shift, and go to state 133

    $default  reduce using rule 117 (expr)


state 103

  118 expr: asg_stmt .

    $default  reduce using rule 118 (expr)


state 104

  119 expr: function_invocation .

    $default  reduce using rule 119 (expr)


state 105

   68 opt_cond: TOK_BITOR expr .
   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_GT      shift, and go to state 144
    TOK_LT      shift, and go to state 145
    TOK_GE      shift, and go to state 146
    TOK_LE      shift, and go to state 147
    TOK_EQ      shift, and go to state 148
    TOK_NE      shift, and go to state 149
    TOK_AND     shift, and go to state 150
    TOK_OR      shift, and go to state 151
    TOK_DOT     shift, and go to state 152

    $default  reduce using rule 68 (opt_cond)


state 106

   59 event_pattern: event_pattern . TOK_COLON event_pattern
   60              | event_pattern . TOK_PAT_STAR
   61              | event_pattern . TOK_PAT_OR event_pattern
   61              | event_pattern TOK_PAT_OR event_pattern .

    TOK_PAT_STAR  shift, and go to state 66
    TOK_COLON     shift, and go to state 68

    $default  reduce using rule 61 (event_pattern)


state 107

   59 event_pattern: event_pattern . TOK_COLON event_pattern
   59              | event_pattern TOK_COLON event_pattern .
   60              | event_pattern . TOK_PAT_STAR
   61              | event_pattern . TOK_PAT_OR event_pattern

    TOK_PAT_STAR  shift, and go to state 66

    $default  reduce using rule 59 (event_pattern)


state 108

   76 statement: TOK_SEMICOLON .

    $default  reduce using rule 76 (statement)


state 109

   70 compound_statement: TOK_LBRACE . statement_star TOK_RBRACE

    $default  reduce using rule 73 (statement_star)

    statement_star  go to state 153


state 110

   71 if_then_else_stmt: TOK_IF . expr statement
   72                  | TOK_IF . expr statement TOK_ELSE statement

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 154


state 111

   77 statement: TOK_RETURN . expr TOK_SEMICOLON

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 155


state 112

   80 statement: compound_statement .

    $default  reduce using rule 80 (statement)


state 113

   81 statement: if_then_else_stmt .

    $default  reduce using rule 81 (statement)


state 114

   50 rule_star: event_pattern TOK_ARROW statement . TOK_SEMICOLON
   52          | event_pattern TOK_ARROW statement .

    TOK_SEMICOLON  shift, and go to state 156

    $default  reduce using rule 52 (rule_star)


state 115

   92 asg_stmt: ref_expr . TOK_ASSIGN expr

    TOK_ASSIGN  shift, and go to state 133


state 116

   78 statement: asg_stmt . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 157


state 117

   79 statement: function_invocation . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 158


state 118

   17 formal_param_plus: formal_param_plus TOK_COMMA formal_param .

    $default  reduce using rule 17 (formal_param_plus)


state 119

   40 type: TOK_IDENT .
   44 variable_decl: TOK_IDENT . error TOK_SEMICOLON
   91 ref_expr: TOK_IDENT .
   93 function_invocation: TOK_IDENT . TOK_LPAREN expr_list TOK_RPAREN

    error       shift, and go to state 35
    TOK_LPAREN  shift, and go to state 131

    error       [reduce using rule 40 (type)]
    TOK_ASSIGN  reduce using rule 91 (ref_expr)
    TOK_IDENT   reduce using rule 40 (type)


state 120

   43 variable_decl: type . variable TOK_SEMICOLON
   45              | type . error TOK_SEMICOLON

    error      shift, and go to state 159
    TOK_IDENT  shift, and go to state 160

    variable  go to state 59


state 121

   42 variable_decl_star: variable_decl_star variable_decl .

    $default  reduce using rule 42 (variable_decl_star)


state 122

   25 body: body_header variable_decl_star statement . TOK_RBRACE

    TOK_RBRACE  shift, and go to state 161


state 123

   47 variable: TOK_IDENT TOK_ASSIGN expr .
   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_GT      shift, and go to state 144
    TOK_LT      shift, and go to state 145
    TOK_GE      shift, and go to state 146
    TOK_LE      shift, and go to state 147
    TOK_EQ      shift, and go to state 148
    TOK_NE      shift, and go to state 149
    TOK_AND     shift, and go to state 150
    TOK_OR      shift, and go to state 151
    TOK_DOT     shift, and go to state 152

    $default  reduce using rule 47 (variable)


state 124

   48 variable: variable TOK_COMMA TOK_IDENT .
   49         | variable TOK_COMMA TOK_IDENT . TOK_ASSIGN expr

    TOK_ASSIGN  shift, and go to state 162

    $default  reduce using rule 48 (variable)


state 125

   51 rule_star: rule_star event_pattern TOK_ARROW statement . TOK_SEMICOLON
   53          | rule_star event_pattern TOK_ARROW statement .

    TOK_SEMICOLON  shift, and go to state 163

    $default  reduce using rule 53 (rule_star)


state 126

   64 identifier: identifier TOK_COMMA TOK_IDENT .

    $default  reduce using rule 64 (identifier)


state 127

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  100     | TOK_MINUS expr .
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_DOT  shift, and go to state 152

    $default  reduce using rule 100 (expr)


state 128

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  104     | TOK_BITNOT expr .
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS   shift, and go to state 134
    TOK_MINUS  shift, and go to state 135
    TOK_MULT   shift, and go to state 136
    TOK_DIV    shift, and go to state 137
    TOK_MOD    shift, and go to state 138
    TOK_SHL    shift, and go to state 142
    TOK_SHR    shift, and go to state 143
    TOK_DOT    shift, and go to state 152

    $default  reduce using rule 104 (expr)


state 129

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  115     | TOK_NOT expr .
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_GT      shift, and go to state 144
    TOK_LT      shift, and go to state 145
    TOK_GE      shift, and go to state 146
    TOK_LE      shift, and go to state 147
    TOK_EQ      shift, and go to state 148
    TOK_NE      shift, and go to state 149
    TOK_DOT     shift, and go to state 152

    $default  reduce using rule 115 (expr)


state 130

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  116     | TOK_LPAREN expr . TOK_RPAREN
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_GT      shift, and go to state 144
    TOK_LT      shift, and go to state 145
    TOK_GE      shift, and go to state 146
    TOK_LE      shift, and go to state 147
    TOK_EQ      shift, and go to state 148
    TOK_NE      shift, and go to state 149
    TOK_AND     shift, and go to state 150
    TOK_OR      shift, and go to state 151
    TOK_RPAREN  shift, and go to state 164
    TOK_DOT     shift, and go to state 152


state 131

   93 function_invocation: TOK_IDENT TOK_LPAREN . expr_list TOK_RPAREN

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    $default  reduce using rule 84 (expr_list)

    expr_plus            go to state 165
    expr_list            go to state 166
    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 167


state 132

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr
  121     | TOK_LBRACK expr .

    TOK_DOT  shift, and go to state 152

    $default  reduce using rule 121 (expr)


state 133

   92 asg_stmt: ref_expr TOK_ASSIGN . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 168


state 134

   95 expr: expr TOK_PLUS . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 169


state 135

   96 expr: expr TOK_MINUS . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 170


state 136

   97 expr: expr TOK_MULT . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 171


state 137

   98 expr: expr TOK_DIV . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 172


state 138

   99 expr: expr TOK_MOD . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 173


state 139

  103 expr: expr TOK_BITAND . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 174


state 140

  102 expr: expr TOK_BITOR . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 175


state 141

  101 expr: expr TOK_BITXOR . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 176


state 142

  105 expr: expr TOK_SHL . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 177


state 143

  106 expr: expr TOK_SHR . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 178


state 144

  107 expr: expr TOK_GT . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 179


state 145

  108 expr: expr TOK_LT . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 180


state 146

  109 expr: expr TOK_GE . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 181


state 147

  110 expr: expr TOK_LE . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 182


state 148

  111 expr: expr TOK_EQ . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 183


state 149

  112 expr: expr TOK_NE . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 184


state 150

  113 expr: expr TOK_AND . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 185


state 151

  114 expr: expr TOK_OR . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 186


state 152

  120 expr: expr TOK_DOT . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 187


state 153

   70 compound_statement: TOK_LBRACE statement_star . TOK_RBRACE
   74 statement_star: statement_star . statement
   75               | statement_star . error TOK_SEMICOLON

    error          shift, and go to state 188
    TOK_SEMICOLON  shift, and go to state 108
    TOK_LBRACE     shift, and go to state 109
    TOK_RBRACE     shift, and go to state 189
    TOK_IF         shift, and go to state 110
    TOK_RETURN     shift, and go to state 111
    TOK_IDENT      shift, and go to state 99

    compound_statement   go to state 112
    if_then_else_stmt    go to state 113
    statement            go to state 190
    ref_expr             go to state 115
    asg_stmt             go to state 116
    function_invocation  go to state 117


state 154

   71 if_then_else_stmt: TOK_IF expr . statement
   72                  | TOK_IF expr . statement TOK_ELSE statement
   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS       shift, and go to state 134
    TOK_MINUS      shift, and go to state 135
    TOK_MULT       shift, and go to state 136
    TOK_DIV        shift, and go to state 137
    TOK_MOD        shift, and go to state 138
    TOK_BITAND     shift, and go to state 139
    TOK_BITOR      shift, and go to state 140
    TOK_BITXOR     shift, and go to state 141
    TOK_SHL        shift, and go to state 142
    TOK_SHR        shift, and go to state 143
    TOK_GT         shift, and go to state 144
    TOK_LT         shift, and go to state 145
    TOK_GE         shift, and go to state 146
    TOK_LE         shift, and go to state 147
    TOK_EQ         shift, and go to state 148
    TOK_NE         shift, and go to state 149
    TOK_AND        shift, and go to state 150
    TOK_OR         shift, and go to state 151
    TOK_SEMICOLON  shift, and go to state 108
    TOK_LBRACE     shift, and go to state 109
    TOK_IF         shift, and go to state 110
    TOK_RETURN     shift, and go to state 111
    TOK_IDENT      shift, and go to state 99
    TOK_DOT        shift, and go to state 152

    compound_statement   go to state 112
    if_then_else_stmt    go to state 113
    statement            go to state 191
    ref_expr             go to state 115
    asg_stmt             go to state 116
    function_invocation  go to state 117


state 155

   77 statement: TOK_RETURN expr . TOK_SEMICOLON
   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS       shift, and go to state 134
    TOK_MINUS      shift, and go to state 135
    TOK_MULT       shift, and go to state 136
    TOK_DIV        shift, and go to state 137
    TOK_MOD        shift, and go to state 138
    TOK_BITAND     shift, and go to state 139
    TOK_BITOR      shift, and go to state 140
    TOK_BITXOR     shift, and go to state 141
    TOK_SHL        shift, and go to state 142
    TOK_SHR        shift, and go to state 143
    TOK_GT         shift, and go to state 144
    TOK_LT         shift, and go to state 145
    TOK_GE         shift, and go to state 146
    TOK_LE         shift, and go to state 147
    TOK_EQ         shift, and go to state 148
    TOK_NE         shift, and go to state 149
    TOK_AND        shift, and go to state 150
    TOK_OR         shift, and go to state 151
    TOK_SEMICOLON  shift, and go to state 192
    TOK_DOT        shift, and go to state 152


state 156

   50 rule_star: event_pattern TOK_ARROW statement TOK_SEMICOLON .

    $default  reduce using rule 50 (rule_star)


state 157

   78 statement: asg_stmt TOK_SEMICOLON .

    $default  reduce using rule 78 (statement)


state 158

   79 statement: function_invocation TOK_SEMICOLON .

    $default  reduce using rule 79 (statement)


state 159

   45 variable_decl: type error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 81


state 160

   46 variable: TOK_IDENT .
   47         | TOK_IDENT . TOK_ASSIGN expr

    TOK_ASSIGN  shift, and go to state 83

    $default  reduce using rule 46 (variable)


state 161

   25 body: body_header variable_decl_star statement TOK_RBRACE .

    $default  reduce using rule 25 (body)


state 162

   49 variable: variable TOK_COMMA TOK_IDENT TOK_ASSIGN . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 193


state 163

   51 rule_star: rule_star event_pattern TOK_ARROW statement TOK_SEMICOLON .

    $default  reduce using rule 51 (rule_star)


state 164

  116 expr: TOK_LPAREN expr TOK_RPAREN .

    $default  reduce using rule 116 (expr)


state 165

   83 expr_plus: expr_plus . TOK_COMMA expr
   85 expr_list: expr_plus .

    TOK_COMMA  shift, and go to state 194

    $default  reduce using rule 85 (expr_list)


state 166

   93 function_invocation: TOK_IDENT TOK_LPAREN expr_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 195


state 167

   82 expr_plus: expr .
   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_GT      shift, and go to state 144
    TOK_LT      shift, and go to state 145
    TOK_GE      shift, and go to state 146
    TOK_LE      shift, and go to state 147
    TOK_EQ      shift, and go to state 148
    TOK_NE      shift, and go to state 149
    TOK_AND     shift, and go to state 150
    TOK_OR      shift, and go to state 151
    TOK_DOT     shift, and go to state 152

    $default  reduce using rule 82 (expr_plus)


state 168

   92 asg_stmt: ref_expr TOK_ASSIGN expr .
   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_GT      shift, and go to state 144
    TOK_LT      shift, and go to state 145
    TOK_GE      shift, and go to state 146
    TOK_LE      shift, and go to state 147
    TOK_EQ      shift, and go to state 148
    TOK_NE      shift, and go to state 149
    TOK_AND     shift, and go to state 150
    TOK_OR      shift, and go to state 151
    TOK_DOT     shift, and go to state 152

    $default  reduce using rule 92 (asg_stmt)


state 169

   95 expr: expr . TOK_PLUS expr
   95     | expr TOK_PLUS expr .
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_MULT  shift, and go to state 136
    TOK_DIV   shift, and go to state 137
    TOK_MOD   shift, and go to state 138
    TOK_DOT   shift, and go to state 152

    $default  reduce using rule 95 (expr)


state 170

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   96     | expr TOK_MINUS expr .
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_MULT  shift, and go to state 136
    TOK_DIV   shift, and go to state 137
    TOK_MOD   shift, and go to state 138
    TOK_DOT   shift, and go to state 152

    $default  reduce using rule 96 (expr)


state 171

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   97     | expr TOK_MULT expr .
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_DOT  shift, and go to state 152

    $default  reduce using rule 97 (expr)


state 172

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   98     | expr TOK_DIV expr .
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_DOT  shift, and go to state 152

    $default  reduce using rule 98 (expr)


state 173

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
   99     | expr TOK_MOD expr .
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_DOT  shift, and go to state 152

    $default  reduce using rule 99 (expr)


state 174

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  103     | expr TOK_BITAND expr .
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS   shift, and go to state 134
    TOK_MINUS  shift, and go to state 135
    TOK_MULT   shift, and go to state 136
    TOK_DIV    shift, and go to state 137
    TOK_MOD    shift, and go to state 138
    TOK_SHL    shift, and go to state 142
    TOK_SHR    shift, and go to state 143
    TOK_DOT    shift, and go to state 152

    $default  reduce using rule 103 (expr)


state 175

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  102     | expr TOK_BITOR expr .
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_DOT     shift, and go to state 152

    $default  reduce using rule 102 (expr)


state 176

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  101     | expr TOK_BITXOR expr .
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_DOT     shift, and go to state 152

    $default  reduce using rule 101 (expr)


state 177

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  105     | expr TOK_SHL expr .
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS   shift, and go to state 134
    TOK_MINUS  shift, and go to state 135
    TOK_MULT   shift, and go to state 136
    TOK_DIV    shift, and go to state 137
    TOK_MOD    shift, and go to state 138
    TOK_DOT    shift, and go to state 152

    $default  reduce using rule 105 (expr)


state 178

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  106     | expr TOK_SHR expr .
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS   shift, and go to state 134
    TOK_MINUS  shift, and go to state 135
    TOK_MULT   shift, and go to state 136
    TOK_DIV    shift, and go to state 137
    TOK_MOD    shift, and go to state 138
    TOK_DOT    shift, and go to state 152

    $default  reduce using rule 106 (expr)


state 179

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  107     | expr TOK_GT expr .
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_DOT     shift, and go to state 152

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 107 (expr)


state 180

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  108     | expr TOK_LT expr .
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_DOT     shift, and go to state 152

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 108 (expr)


state 181

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  109     | expr TOK_GE expr .
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_DOT     shift, and go to state 152

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 109 (expr)


state 182

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  110     | expr TOK_LE expr .
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_DOT     shift, and go to state 152

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 110 (expr)


state 183

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  111     | expr TOK_EQ expr .
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_DOT     shift, and go to state 152

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 111 (expr)


state 184

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  112     | expr TOK_NE expr .
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_DOT     shift, and go to state 152

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 112 (expr)


state 185

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  113     | expr TOK_AND expr .
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_GT      shift, and go to state 144
    TOK_LT      shift, and go to state 145
    TOK_GE      shift, and go to state 146
    TOK_LE      shift, and go to state 147
    TOK_EQ      shift, and go to state 148
    TOK_NE      shift, and go to state 149
    TOK_DOT     shift, and go to state 152

    $default  reduce using rule 113 (expr)


state 186

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  114     | expr TOK_OR expr .
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_GT      shift, and go to state 144
    TOK_LT      shift, and go to state 145
    TOK_GE      shift, and go to state 146
    TOK_LE      shift, and go to state 147
    TOK_EQ      shift, and go to state 148
    TOK_NE      shift, and go to state 149
    TOK_AND     shift, and go to state 150
    TOK_DOT     shift, and go to state 152

    $default  reduce using rule 114 (expr)


state 187

   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr
  120     | expr TOK_DOT expr .

    $default  reduce using rule 120 (expr)


state 188

   75 statement_star: statement_star error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 196


state 189

   70 compound_statement: TOK_LBRACE statement_star TOK_RBRACE .

    $default  reduce using rule 70 (compound_statement)


state 190

   74 statement_star: statement_star statement .

    $default  reduce using rule 74 (statement_star)


state 191

   71 if_then_else_stmt: TOK_IF expr statement .
   72                  | TOK_IF expr statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 197

    TOK_ELSE  [reduce using rule 71 (if_then_else_stmt)]
    $default  reduce using rule 71 (if_then_else_stmt)


state 192

   77 statement: TOK_RETURN expr TOK_SEMICOLON .

    $default  reduce using rule 77 (statement)


state 193

   49 variable: variable TOK_COMMA TOK_IDENT TOK_ASSIGN expr .
   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_GT      shift, and go to state 144
    TOK_LT      shift, and go to state 145
    TOK_GE      shift, and go to state 146
    TOK_LE      shift, and go to state 147
    TOK_EQ      shift, and go to state 148
    TOK_NE      shift, and go to state 149
    TOK_AND     shift, and go to state 150
    TOK_OR      shift, and go to state 151
    TOK_DOT     shift, and go to state 152

    $default  reduce using rule 49 (variable)


state 194

   83 expr_plus: expr_plus TOK_COMMA . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 99
    TOK_LBRACK     shift, and go to state 100

    literal              go to state 101
    ref_expr             go to state 102
    asg_stmt             go to state 103
    function_invocation  go to state 104
    expr                 go to state 198


state 195

   93 function_invocation: TOK_IDENT TOK_LPAREN expr_list TOK_RPAREN .

    $default  reduce using rule 93 (function_invocation)


state 196

   75 statement_star: statement_star error TOK_SEMICOLON .

    $default  reduce using rule 75 (statement_star)


state 197

   72 if_then_else_stmt: TOK_IF expr statement TOK_ELSE . statement

    TOK_SEMICOLON  shift, and go to state 108
    TOK_LBRACE     shift, and go to state 109
    TOK_IF         shift, and go to state 110
    TOK_RETURN     shift, and go to state 111
    TOK_IDENT      shift, and go to state 99

    compound_statement   go to state 112
    if_then_else_stmt    go to state 113
    statement            go to state 199
    ref_expr             go to state 115
    asg_stmt             go to state 116
    function_invocation  go to state 117


state 198

   83 expr_plus: expr_plus TOK_COMMA expr .
   95 expr: expr . TOK_PLUS expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_MULT expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MOD expr
  101     | expr . TOK_BITXOR expr
  102     | expr . TOK_BITOR expr
  103     | expr . TOK_BITAND expr
  105     | expr . TOK_SHL expr
  106     | expr . TOK_SHR expr
  107     | expr . TOK_GT expr
  108     | expr . TOK_LT expr
  109     | expr . TOK_GE expr
  110     | expr . TOK_LE expr
  111     | expr . TOK_EQ expr
  112     | expr . TOK_NE expr
  113     | expr . TOK_AND expr
  114     | expr . TOK_OR expr
  120     | expr . TOK_DOT expr

    TOK_PLUS    shift, and go to state 134
    TOK_MINUS   shift, and go to state 135
    TOK_MULT    shift, and go to state 136
    TOK_DIV     shift, and go to state 137
    TOK_MOD     shift, and go to state 138
    TOK_BITAND  shift, and go to state 139
    TOK_BITOR   shift, and go to state 140
    TOK_BITXOR  shift, and go to state 141
    TOK_SHL     shift, and go to state 142
    TOK_SHR     shift, and go to state 143
    TOK_GT      shift, and go to state 144
    TOK_LT      shift, and go to state 145
    TOK_GE      shift, and go to state 146
    TOK_LE      shift, and go to state 147
    TOK_EQ      shift, and go to state 148
    TOK_NE      shift, and go to state 149
    TOK_AND     shift, and go to state 150
    TOK_OR      shift, and go to state 151
    TOK_DOT     shift, and go to state 152

    $default  reduce using rule 83 (expr_plus)


state 199

   72 if_then_else_stmt: TOK_IF expr statement TOK_ELSE statement .

    $default  reduce using rule 72 (if_then_else_stmt)
